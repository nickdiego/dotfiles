# vim:ft=sh:
## Random useful stuff
alias ls='ls --color'

PROXY_INDT=172.18.216.7

#PS1="\033]0;${PWD}\n\033[32m${USER}@${HOSTNAME} \033[33m${PWD/${HOME}/~}$ "
alias vncn9="vncviewer ${N92_IP}:0"
alias psgrep='ps aux | grep '
alias fgrep='find|grep --exclude="*~" --exclude="*.swp"'
alias sendpatch='arc diff --reviewers lmoura,tullio,luck,hugopl,dakerfp,lacerda,setanta,sergio,zanoni HEAD~1'
alias reattach-tmux='tmux attach -tprogramming'

export ZBAR=/home/nick/apm-2012/apps/buscape/zbar-0.10
export BUSCAPE=/home/nick/apm-2012/apps/buscape/git-repo/searchfoot
alias zxing=/home/nick/apm-2012/apps/buscape/zxing-2.0/cpp/build/zxing
alias zbarimg=/home/nick/apm-2012/apps/buscape/zbar-0.10/build/zbarimg/zbarimg

export EDITOR=vim
export VISUAL=vim
export NODE_PATH=/usr/local/lib/node_modules

export MUCURA="nick@mucura.local"
export PATH=~/bin:$PATH

#icecc_setup
export USE_SCHEDULER=10.60.69.53
function icecc_setup {
  #export ICECC_VERSION=$HOME/.icecc/linux-x86_64-gcc4.6.3-x86_64.tar.gz
  #export ICECC_VERSION=$HOME/.icecc/linux-x86_64-gcc4.8.1-x86_64.tar.gz
  export ICECC_VERSION=$HOME/.icecc/linux-x86_64-gcc4.7.3-x86_64.tar.gz
  export CCACHE_PREFIX=icecc
  for i in gcc g++ cc c++; do
    ln -sf /usr/bin/ccache $HOME/bin/$i
  done
}

#nix-related
WEBKIT=$HOME/projects/webkit-nix
if [ -f $WEBKIT/nix-env.sh ]; then
  export WEBKIT
  . $WEBKIT/nix-env.sh
fi

alias vim='vim -c "set columns=$COLUMNS"'
export RPI_NICK=pi@10.60.69.52

#alias vim='vim -c "set columns=$COLUMNS"'
alias ssh-diegoyam-server='ssh server-amazon -i ~/key_amazon_server.pem'

# Create a ssh reverse tunnel to my amazon cloud server
reverse_tunnel_server() {
  ssh -R 30000:localhost:22 server-amazon
}

export PATH=$HOME/local/bin:$PATH

# When using git-svn to manipulate a svn repo
# through git tool, the SVN tags are not automatically
# imported as GIT tags, instead, the svn tagas are
# initially git remote branches
#
# This functions tranforms those svn tags in actual
# git tags
git_import_svn_tags()  {
  if [ "x$1" = "x--do-it" ]; then
    DO_IT=1
  fi

  git for-each-ref --format="%(refname:short) %(objectname)" refs/remotes/tags |
  while read BRANCH REF; do
    TAG_NAME=${BRANCH#*/}
    BODY="$(git log -1 --format=%s $REF)"
    #echo "ref=[$REF] parent=[$(git rev-parse $REF^)] tagname=[$TAG_NAME] branch=[$BRANCH]" >&2

    echo "git tag -a -m \"$BODY\" $TAG_NAME $REF^"
    echo "git branch -r -d $BRANCH"
    if [ ! -z $DO_IT ]; then
      git tag -a -m "$BODY" $TAG_NAME $REF^
      git branch -r -d $BRANCH
    fi
  done

  if [ -z $DO_IT ]; then
    echo ##################################
    echo Only showing what to do!
    echo To actually do that run: $0 --do-it
    echo ##################################
  fi
}

# git completion in Arch
if [ -f /usr/share/git/completion/git-completion.bash ]; then
  . /usr/share/git/completion/git-completion.bash
fi

# Enables a (already xrandr configured) second monitor,
# to see current configured outputs:
#
# $ xrandr -q
#
# usage: enable_display [<XRANDR_OUTPUT_ID>]
# Running Wayland
if [ ! -z $WAYLAND_DISPLAY ]; then
  export DISPLAY_MAIN='XWAYLAND0'
  export DISPLAY_AUX='XWAYLAND1'
  export DISPLAY_AUX='XWAYLAND2'
else
  # Running Xorg
  export DISPLAY_MAIN='LVDS1'
  export DISPLAY_AUX1='VGA1'
  export DISPLAY_AUX2='HDMI1'
fi

MODE_DISPLAY_AUX="1440x900"

enable-display-aux1() {
  xrandr --output $DISPLAY_AUX1 --mode $MODE_DISPLAY_AUX $@
}

enable-display-aux2() {
  xrandr --output $DISPLAY_AUX2 --mode $MODE_DISPLAY_AUX $@
}

enable-display-main() {
  xrandr --output $DISPLAY_MAIN --auto $@
}

disable_display() {
  OUTPUT_ID=$1
  [ -z $OUTPUT_ID ] && OUTPUT_ID=$DISPLAY_AUX1
  xrandr --output $OUTPUT_ID --off
}

alias disable-display-main="disable_display $DISPLAY_MAIN"
alias disable-display-aux1="disable_display $DISPLAY_AUX1"
alias disable-display-aux2="disable_display $DISPLAY_AUX2"

fix_resolution_main_monitor() {
  xrandr --newmode "1440x900"  106.50  1440 1528 1672 1904  900 903 909 934 -hsync +vsync
  xrandr --addmode $DISPLAY_MAIN "1440x900"
  xrandr --output $DISPLAY_MAIN --mode "1440x900"
}

fake-arrange-displays() {
    echo xrandr \
          --output $DISPLAY_AUX2 --mode "$MODE_DISPLAY_AUX" --primary \
          --output $DISPLAY_AUX1 --mode "$MODE_DISPLAY_AUX" --right-of $DISPLAY_AUX2 \
          --output $DISPLAY_MAIN --auto --right-of $DISPLAY_AUX1
}

arrange-displays() {
  if [ "x$1" = 'x2' ]; then
    disable_display $DISPLAY_MAIN && sleep 1
    enable-display-aux2
  else

    m="1440x900_2"
    xrandr --newmode "$MODE_DISPLAY_AUX" 126.00  1440 1528 1680 1920  900 903 909 940 -hsync +vsync
    xrandr --addmode $DISPLAY_AUX1 "$MODE_DISPLAY_AUX"
    xrandr --addmode $DISPLAY_AUX2 "$MODE_DISPLAY_AUX"
    xrandr --output $DISPLAY_AUX2 --off --output $DISPLAY_AUX1 --off
    sleep 2
    xrandr --output $DISPLAY_AUX2 --mode "$MODE_DISPLAY_AUX" --primary \
          --output $DISPLAY_AUX1 --mode "$MODE_DISPLAY_AUX" --right-of $DISPLAY_AUX2 \
          --output $DISPLAY_MAIN --auto --right-of $DISPLAY_AUX1
  fi
}

set_main_monitor() {
  OUTPUT_ID=$1
  xrandr --output $OUTPUT_ID --primary
}

set_left_as_main_monitor() {
  set_main_monitor $DISPLAY_AUX1
}

set_right_as_main_monitor() {
  set_main_monitor $DISPLAY_MAIN
}

start_aux_monitor() {
  enable_display_aux1 && sleep 1
  disable_display $DISPLAY_MAIN && sleep 1
  enable-display-main
}

reset_findsrc_dir() {
    export FINDSRC_DIR='.'
}
reset_findsrc_dir

findsrc() {
    DIR='.'
    [ -z $FINDSRC_DIR ] && DIR=$PWD
    find $DIR | grep "$1.c\$\|$1.cpp\$\|$1.h\$"
}

grepsrc() {
    grep $@ `find -name "*[.cpp,.h]"`
}

export POWERLINE_PATH="$HOME/.local/lib/python2.7/site-packages/powerline"
#. $POWERLINE_PATH/bindings/bash/powerline.sh

# replacing something in several files
#cat /tmp/xxxxx | xargs -I '{}' sed -i 's/RenderPartObject {IFRAME}/RenderIFrame {IFRAME}/g' {}

alias grep="grep --exclude='*~' --exclude='*.swp'"
alias remove_colors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
alias pjson='json | pygmentize -l json'

# open vim session
v() {
  local arg=`test -z $1 || echo -S ~/.vim/sessions/$1`
  vim $arg
}

_vim_sessions() {
  local cur prev sessions

  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  sessions=$([ -d ~/.vim/sessions ] && basename -a `ls ~/.vim/sessions`)

  COMPREPLY=( $(compgen -W "${sessions}" -- ${cur}) )
  return 0
}

complete -F _vim_sessions v

remove_from_path() {
  local p d dirs
  dirs=$@
  for d in $dirs; do
    p=`echo $PATH | sed -e "s,:$d,,"`
    export PATH=$p
  done
}

# Set $verbose_env var to see debug messages
# from env scripts
#verbose_env=on
tools_dir=$HOME/devtools
if [ -d ~/.tools-env.d ]; then
  for env_script in ~/.tools-env.d/*.sh; do
    if [ -r $env_script ]; then
      . $env_script
    fi
  done
  unset i
fi

proj_dir=$HOME/projects
if [ -d ~/.projects-env.d ]; then
  for env_script in ~/.projects-env.d/*.sh; do
    if [ -r $env_script ]; then
      . $env_script
    fi
  done
  unset i
fi

unset tools_dir
unset proj_dir

export curr_proj_build_dir=$src_drunk_clt/build

screenshot() {
  local file="$HOME/Pictures/screenshot-`date +'%b-%d-%y_%H:%M:%S'`.jpg"
	echo "## Select the screen region."
	echo "## Will save it in $file"
	gm import "$file" && nautilus "$file"&
}

get_external_ip() {
  curl -s http://whatismyip.org/ | grep -oP '(\d{1,3}\.){3}\d+'
}

bashrc-reload() {
  source ~/.bashrc
}

alias load-ssh-keys='eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa_2016'
