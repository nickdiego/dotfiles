# Development env helpers (vars,
# functions, workarounds, aliases,
# plugins, etc..
export EDITOR=vim
export VISUAL=vim
export MAIL=/var/spool/mail/nick
export FIGNORE='.swp:.un~'

export PATH=~/.bin:~/local/bin:$PATH

is_zsh() {
  type compctl >/dev/null 2>&1
  return $?
}

is_bash() {
  type complete >/dev/null 2>&1
  return $?
}

# Find/Grep src helper functions
reset_findsrc_dir() {
  export FINDSRC_DIR='.'
}

findsrc() {
  DIR='.'
  [ -z $FINDSRC_DIR ] && DIR=$PWD
  find $DIR | grep "$1.c\$\|$1.cpp\$\|$1.h\$"
}

grepsrc() {
  grep $@ `find -name "*[.cpp,.h]"`
}

reset_findsrc_dir

# replacing something in several files
#cat /tmp/xxxxx | xargs -I '{}' sed -i 's/RenderPartObject {IFRAME}/RenderIFrame {IFRAME}/g' {}

alias remove_colors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
alias pjson='json | pygmentize -l json'

remove_from_path() {
  local p d dirs
  dirs=$@
  for d in $dirs; do
    p=`echo $PATH | sed -e "s,:$d,,"`
    export PATH=$p
  done
}

take-screenshot() {
  local outdir=${1:-$HOME/Pictures}
  local filename="${2:-screenshot-`date +'%b-%d-%y_%H:%M:%S'`}.jpg"
  local file="${outdir}/${filename}"
  test -d $outdir || mkdir -p $outdir
  echo "## Select the screen region."
  echo "## Will save it in $file"
  gm import "$file" && nemo "$file"&
}

get_external_ip() {
  curl -s http://whatismyip.org/ | grep -oP '(\d{1,3}\.){3}\d+'
}

alias image-dimensions="identify -format \"%i -> %w x %h\n\" $@"

pac() {
  local needs_sudo=0
  for arg in $@; do
    case $arg in
      -S | -R | -Rs | -Syu)
        needs_sudo=1
        ;;
    esac
  done
  if (( $needs_sudo )); then
    sudo pacman $@
  else
    pacman $@
  fi
}

check_shared_lib() {
  ldd -r $1
}

alias i='pac -S'
alias s='pac -Ss'
alias r='pac -R'
alias rr='pac -Rs'
alias u='pac -Syu'

trust-key() {
  local key=$1
  gpg --recv-key $key
  gpg --lsign $key
}

set-window-title() {
  test -n $TMUX && tmux rename-window "$1"
  which wmctrl >/dev/null || { echo "Error! 'wmctrl' not installed!";  return 1; }
  DISPLAY=':0' wmctrl -r :ACTIVE: -N "$1"
}

find_in_jars() {
  local keyword=$1
  local dir=$2 i
  for i in $(find ${dir} -name '*.jar'); do
    echo "----- jarfile: $i"
    unzip -l $i | grep --color $keyword
  done
} && alias fj='find_in_jars'

## Projects confs

[ -f ~/.tools-env ] && . ~/.tools-env
# Only working on bash for now :(
if is_bash; then
  [ -f ~/.proj-commander/proj-commander.sh ] &&
    source ~/.proj-commander/proj-commander.sh
fi

export ethernet='enp1s0'
export wlan='wlp2s0'

if [ -r $HOME/.vim/bundle/powerline/scripts/powerline-config ]; then
  export PATH="$HOME/.vim/bundle/powerline/scripts:$PATH"
fi

# Base16 theme stuff
_B16_FAVS=( default-dark atelier-savanna brewer circus embers material-darker onedark tomorrow-night )
_B16_SHELL_PATH="$HOME/.config/base16-shell"
_B16_THEME_NAME='default-dark'
_B16_THEME_SCRIPT="${_B16_SHELL_PATH}/scripts/base16-${_B16_THEME_NAME}.sh"
if [ -s $_B16_SHELL_PATH/profile_helper.sh ]; then
  eval "$($_B16_SHELL_PATH/profile_helper.sh)"
  test -e "$HOME/.vimrc_background" || \
    _base16 ${_B16_THEME_SCRIPT} ${_B16_THEME_NAME}
fi

udpate_cups_ppd_file() {
  echo "## Updating ppd files..."
  sudo /usr/bin/cups-genppdupdate &&
  echo "## Restarting cuspsd service..."
  sudo systemctl restart org.cups.cupsd.service
}

config_static_tmp_ip() {
  local dev=${1:-enp1s0}
  local ip='192.168.0.10'
  local mask='255.255.255.0'
  echo "Setting $dev static ip (temporary) to ${ip}..."
  sudo ifconfig $dev $ip netmask $mask
}

download_dir() {
  wget -r --no-parent --reject "index.html*" $1
}

vysor() {
  local electron_dir="$HOME/sandbox/electron-chrome"
  local electron_exe="${electron_dir}/node_modules/electron/dist/electron"
  $electron_exe $electron_dir --app-id=gidgenkbbabolejbgbpnhbimgjbffefm
}

load-ssh-keys() {
  if [ ! -S ~/.ssh/ssh_auth_sock ]; then
    eval `ssh-agent`>/dev/null
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
  fi
  export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
  ssh-add -l || ssh-add ~/.ssh/id_rsa_2016
}

load-ssh-keys &>/dev/null

if [ -r ~/.bin/display-utils.sh ]; then
  source ~/.bin/display-utils.sh &&
    alias arrange-displays=toggle-aux-display
fi

if [ -n "$SHOW_ARCHINFO" ] && type archey3 &>/dev/null; then
  archey3
fi

if [ -r ~/.localenv ]; then
  source ~/.localenv
fi

export MY_GPG_USERID='9B41EB2ECFFBFE525E383E015C041CA1FC08A584'
export DOCKER_ID_USER="nickdiego"

# ex: ts=2 sw=2 et filetype=sh
